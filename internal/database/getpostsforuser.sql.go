// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: getpostsforuser.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getPostsforUser = `-- name: GetPostsforUser :many

SELECT posts.id, posts.created_at, posts.updated_at, posts.title, posts.url, posts.description, posts.published_at, posts.feed_id
FROM users 
LEFT JOIN feed_follow ON users.id = feed_follow.user_id
LEFT JOIN feeds ON feed_follow.feed_id = feeds.id
LEFT JOIN posts ON feeds.id = posts.feed_id
WHERE users.name = $1
ORDER BY published_at DESC
LIMIT $2
`

type GetPostsforUserParams struct {
	Name  string
	Limit int32
}

type GetPostsforUserRow struct {
	ID          uuid.NullUUID
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Title       sql.NullString
	Url         sql.NullString
	Description sql.NullString
	PublishedAt sql.NullTime
	FeedID      uuid.NullUUID
}

func (q *Queries) GetPostsforUser(ctx context.Context, arg GetPostsforUserParams) ([]GetPostsforUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsforUser, arg.Name, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsforUserRow
	for rows.Next() {
		var i GetPostsforUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
